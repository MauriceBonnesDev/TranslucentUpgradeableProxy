/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ImplementationV2Interface extends Interface {
  getFunction(
    nameOrSignature: "multiply" | "sum" | "totalValue"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TotalValueChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "multiply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalValue",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "multiply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalValue", data: BytesLike): Result;
}

export namespace TotalValueChangedEvent {
  export type InputTuple = [newValue: BigNumberish];
  export type OutputTuple = [newValue: bigint];
  export interface OutputObject {
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ImplementationV2 extends BaseContract {
  connect(runner?: ContractRunner | null): ImplementationV2;
  waitForDeployment(): Promise<this>;

  interface: ImplementationV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  multiply: TypedContractMethod<
    [_num1: BigNumberish, _num2: BigNumberish],
    [void],
    "nonpayable"
  >;

  sum: TypedContractMethod<
    [_num1: BigNumberish, _num2: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalValue: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "multiply"
  ): TypedContractMethod<
    [_num1: BigNumberish, _num2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sum"
  ): TypedContractMethod<
    [_num1: BigNumberish, _num2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalValue"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "TotalValueChanged"
  ): TypedContractEvent<
    TotalValueChangedEvent.InputTuple,
    TotalValueChangedEvent.OutputTuple,
    TotalValueChangedEvent.OutputObject
  >;

  filters: {
    "TotalValueChanged(int256)": TypedContractEvent<
      TotalValueChangedEvent.InputTuple,
      TotalValueChangedEvent.OutputTuple,
      TotalValueChangedEvent.OutputObject
    >;
    TotalValueChanged: TypedContractEvent<
      TotalValueChangedEvent.InputTuple,
      TotalValueChangedEvent.OutputTuple,
      TotalValueChangedEvent.OutputObject
    >;
  };
}
